// Import Libraries
import java.awt.*;
import processing.awt.PSurfaceAWT;
import processing.core.PApplet;
import javax.swing.JPanel;
import javax.swing.JFrame;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseEvent;
import java.awt.MouseInfo;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

private int surfacePosX = 125;
private int surfacePosY = 100;
private Point mouse = new Point(0, 0);

//Declare Gobal Variables
PGraphics pg;
JFrame frame;
JPanel panel;
PApplet applet = this;

void setup()
{
  surface.setSize(400, 400);
  surface.setLocation(surfacePosX, surfacePosY);


  frame = (JFrame)((PSurfaceAWT.SmoothCanvas) getSurface().getNative()).getFrame();
  frame.removeNotify();
  frame.setUndecorated(true);
  frame.setResizable(true);
  frame.setLayout(null);
  frame.addNotify();

  pg = createGraphics(width, height);

  JPanel panel = new JPanel() {
    @Override
      protected void paintComponent(Graphics graphics) {
      if (graphics instanceof Graphics2D) {
        Graphics2D g2d = (Graphics2D) graphics;
        g2d.drawImage(pg.image, 0, 0, null);
      }
    }
  };

  frame.setContentPane(panel);
  panel.setFocusable(true);
  panel.setFocusTraversalKeysEnabled(true);
  panel.requestFocus();
  panel.requestFocusInWindow();

  MouseAdapter mA = 
    new MouseAdapter() {
    public void mousePressed(MouseEvent me) {
      mousePressed = true;
      applet.mousePressed();
    }
    public void mouseReleased(MouseEvent me) {
      mousePressed = false;
      applet.mouseReleased();
    }
  };

  panel.addMouseListener(mA);

  mA = new MouseAdapter() {

    public void mouseDragged(MouseEvent me) {
      mouseX = MouseInfo.getPointerInfo().getLocation().x-frame.getLocation().x;
      mouseY = MouseInfo.getPointerInfo().getLocation().y-frame.getLocation().y;
      applet.mouseDragged();
    }
  };

  panel.addMouseMotionListener(mA);


  KeyListener kL = 
    new KeyListener() {

    public void keyTyped(KeyEvent e) {
      key = e.getKeyChar();
      keyCode = e.getKeyCode();
      applet.keyTyped();
    }

    public void keyReleased(KeyEvent e) {
      key = e.getKeyChar();
      keyCode = e.getKeyCode();
      applet.keyReleased();
      keyPressed = false;
    }

    public void keyPressed(KeyEvent e) {
      key = e.getKeyChar();
      keyCode = e.getKeyCode();
      applet.keyPressed();
      keyPressed = true;
    }
  };

  panel.addKeyListener(kL); 
}



void draw()
{
  frame.setBackground(new Color(0, 0, 0, 0.000));
  
  for (int y = 0; y <= height+40; y = y + 40) {
        for (int x = 0; x <= width+40; x = x + 40) {
        float d = dist(x, y, mouseX, mouseY);
        float maxDist = dist(0, 0, width/2, height/2);
        float mid = map(d, 0, maxDist/3, 400, 0);
        pg.beginDraw();
        pg.noStroke();
        pg.fill(mid);
        pg.ellipse(x, y, 40, 40);
        pg.endDraw();
    }
      updateSurface();
  }
  pg.beginDraw();
  pg.strokeWeight(2);
  pg.noFill();
  pg.stroke(255);
  pg.rect(2, 2, width-3, height-3);
  pg.noStroke();
  pg.endDraw();
}

private void updateSurface() {
        // println("update surface");
        Point pm = mouse;
        mouse = MouseInfo.getPointerInfo().getLocation();
        if (mousePressed) {
            surfacePosX -= (pm.x - mouse.x);
            surfacePosY -= (pm.y - mouse.y);
            surface.setLocation(surfacePosX, surfacePosY);
        }
    }
